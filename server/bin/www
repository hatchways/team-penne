#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require("../app");
var http = require("http");
var debug = require("debug")("express-sequelize");
var cookie = require("cookie");
var socketio = require("socket.io");

var models = require("../database/models");
const { checkForSales } = require("../database/handlers/notificationDBHandler");
const { authJWTCheck } = require("../routes/authCheck");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
//server.on("error", onError);
//server.on("listening", onListening);
models.sequelize.sync().then(function() {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port, function() {
    debug("Express server listening on port " + server.address().port);
  });
  server.on("error", onError);
  server.on("listening", onListening);
});

/**
 * Socket setup
 */
const io = socketio(server);
var socketClients = {};

io.on("connection", socket => {
  console.log("We have a new connection.");
  let encodedCookie = socket.handshake.headers.cookie;
  var parsedCookies = cookie.parse(encodedCookie);

  // User data of current Socket User stored in userData
  // User data includes: userName, userEmail and userId
  var userData = authJWTCheck(parsedCookies);
  // unable to get userData
  if (userData.message != null) {
    socket.disconnect(true);
  } else {
    // socket.id is a unique identifier created when socket is connected
    // save socketId in list, and then connect with socket.to(socket.id).emit(...)
    socketClients[userData.userId] = socket.id;
  }
});

io.on("disconnect", () => {
  var userData = authJWTCheck(parsedCookies);
  delete socketClients[userData.userId];
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  checkForSales(io, socketClients);

  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
